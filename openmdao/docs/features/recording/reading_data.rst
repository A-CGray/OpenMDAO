
************
Case Reading
************

In the section on :ref:`Case Recording<saving_data>`, we saw some basic examples of using a
`CaseReader` to inspect data from a database file generated by a `CaseRecorder`.  The `CaseReader`
provides a number of ways to flexibly access the information that has been recorded.

Iterating Over Case Hierarchies
-------------------------------

A common approach to inspecting the recorded cases is to use the :code:`list_cases` method 
followed by :code:`get_case` on a case you want to see.

.. embed-code::
    openmdao.recorders.tests.test_sqlite_reader.TestFeatureSqliteReader.test_feature_list_cases
    :layout: code, output

Alternatively, if you just want to iterate over all the cases you can use the :code:`get_cases` method.

.. embed-code::
    openmdao.recorders.tests.test_sqlite_reader.TestFeatureSqliteReader.test_feature_get_cases
    :layout: code, output

By default, the :code:`list_cases` method will give a complete list of cases in the order in which 
they were executed and :code:`get_cases` will give a recursive nested dictionary of cases and their
child cases in the order in which they were executed.

The following example demonstrates selecting a case from a case list and processing a nested 
dictionary of it's child cases.

.. embed-code::
    openmdao.recorders.tests.test_sqlite_reader.TestFeatureSqliteReader.test_feature_get_cases_nested
    :layout: code, output


Getting Variable Data from a Case
---------------------------------


:class:`Case<openmdao.recorders.case.Case>` objects have a number of attributes and 
methods to for accessing variables and their values.

The following example shows how to use the methods to easily see check the variables of interest 
from the first driver iteration.

.. embed-code::
    openmdao.recorders.tests.test_sqlite_reader.TestFeatureSqliteReader.test_feature_driver_options_with_values
    :layout: interleave

.. note::
    Note that you can use either the promoted or absolute names when accessing variables.


Getting Derivative Data from a Case
-----------------------------------

A driver has the ability to record derivatives but it is not enabled by default.  If you do enable 
this option, the recorded cases will have a value for the :code:`jacobian`.

.. embed-code::
    openmdao.recorders.tests.test_sqlite_reader.TestFeatureSqliteReader.test_feature_reading_derivatives
    :layout: interleave


Getting Metadata
----------------

*Problem Metadata*
~~~~~~~~~~~~~~~~~~

By default, a case recorder will save metadata about the model to assist in later visualization
and debugging.  This information is made available via the :code:`problem_metadata` attribute of
a `CaseReader`.

.. embed-code::
    openmdao.recorders.tests.test_sqlite_recorder.TestFeatureSqliteRecorder.test_feature_problem_metadata
    :layout: interleave

*System Metadata*
~~~~~~~~~~~~~~~~~

Systems record both scaling factors and options within 'scaling_factors' and 'component_options',
respectively, in :code:`system_metadata`.

The component options include user-defined options that were defined
through the :code:`system.options.declare` method. By default, everything in options is
pickled and recorded. If there are options that cannot be pickled or you simply do not wish
to record, they can be excluded using the 'options_excludes' recording option on the system.

By setting the :code:`record_model_metadata` option on `Driver`, you can record the metadata
for every system in the model.

.. embed-code::
    openmdao.recorders.tests.test_sqlite_recorder.TestFeatureSqliteRecorder.test_feature_system_metadata
    :layout: interleave

.. note::
    Each system object must have a recorder explicitly attached in order for its metadata and options to be recorded.

   
*Solver Metadata*
~~~~~~~~~~~~~~~~~

Solvers record the solver options as metadata. Note that, because more than
one solver's metadata may be recorded, each solver's metadata must be accessed through
its absolute name within :code:`solver_metadata`, as shown in the example below.

.. embed-code::
    openmdao.recorders.tests.test_sqlite_recorder.TestFeatureSqliteRecorder.test_feature_solver_metadata
    :layout: interleave

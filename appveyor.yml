build: off

image:
- Ubuntu
- Visual Studio 2015

environment:
  PY:
    - 2.7
    - 3.6
    - 3.7
  NUMPY:
    - 1.15
  SCIPY:
    - 1.1
  PETSc4PY:
    - null
    - 3.10
  matrix:
    exclude:
      - image: Visual Studio 2015
        PETSc4PY: 3.10
      - image: Ubuntu
        PETSc4PY: null
    fast_finish: true

  encrypted_74d70a284b7d_key:
    secure: 7u/kPupG0BmwqAJOLeyGMPakwj3lqukKHXsxEP4+6aX+Huu8VH2ZkDNq6GYlaw6HGJHi2JTAal9VDgOpZc9RMlweOrXJiNFWS3Iu0chy+L4=

  encrypted_74d70a284b7d_iv:
    secure: ZvlRNZ0mVCgCzlscRSABvE8CJUdCU2oAE5AucD0GHz3iGWasTe7k6bBswulzhn18

  SNOPT_LOCATION:
    secure: BMuN2XRyyMclCtx+SGQCMNgbtSplR5GnBKRZVvotqd1SO6aNpMyh+Hqv+23+vBMFcN7te93hDiAE5+joj4R+H4sGGyeRb+khsu/sILHZaLQ=

install:
- sh:
    if [ "$encrypted_74d70a284b7d_key" ]; then
      openssl aes-256-cbc -K $encrypted_74d70a284b7d_key -iv $encrypted_74d70a284b7d_iv -in travis_deploy_rsa.enc -out /tmp/travis_deploy_rsa -d;
      eval "$(ssh-agent -s)";
      chmod 600 /tmp/travis_deploy_rsa;
      ssh-add /tmp/travis_deploy_rsa;
      echo -e "Host web543.webfaction.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config;
    fi

    sudo add-apt-repository ppa:ubuntu-toolchain-r/test;
    sudo apt-get update;
    sudo apt-get -y install gfortran;
    sudo apt-get -y install libblas-dev;
    sudo apt-get -y install liblapack-dev;
    sudo apt-get -y install libopenmpi-dev;
    sudo apt-get -y install openmpi-bin;

    echo "Building python environment...";
    wget "https://repo.continuum.io/miniconda/Miniconda${PY:0:1}-4.5.11-Linux-x86_64.sh" -O miniconda.sh;
    chmod +x miniconda.sh;
    ./miniconda.sh -b  -p $HOME/miniconda;
    export PATH=$HOME/miniconda/bin:$PATH;

    conda create --yes -n PY$PY python=$PY;
    source $HOME/miniconda/bin/activate PY$PY;

    conda install --yes numpy=$NUMPY scipy=$SCIPY cython swig;

    pip install --upgrade pip;

    echo "Installing forked python packages";
    pip install git+https://github.com/swryan/coveralls-python@work;
    pip install git+https://github.com/OpenMDAO/testflo.git;

    echo "Cloning pyOptSparse source code from OpenMDAO's fork"
    git clone https://github.com/OpenMDAO/pyoptsparse.git;
    cd pyoptsparse;

    if [ "$SNOPT_LOCATION" ] && [ "${PY:0:1}" = "3" ]; then
      cd pyoptsparse/pySNOPT;
      echo "Secure copying Sparse Nonlinear OPTimizer over SSH"
      scp -r "$SNOPT_LOCATION" ./source;
      cd ../..;
    fi

    echo "Building pyOptSparse"
    python setup.py install;
    cd ..;

    if [ "PETSc4PY" ]; then
      echo "Installing parallel computing dependencies"
      pip install mpi4py petsc4py==$PETSc;
    fi

    echo "Installing OpenMDAO"
    pip install .[develop,docs];
    conda list;

# Set conda path based on Python version
- cmd: if %PY% GTR 3 (set CONDA="C:\\Miniconda3%PY:~2%-x64") else (set CONDA="C:\\Miniconda-x64")
- cmd: set PATH=%CONDA%;%CONDA%\Scripts;%PATH%
- cmd: conda config --set always_yes yes
- cmd: conda update conda
- cmd: conda install python=%PY% make numpy=%NUMPY% pip scipy=%SCIPY% --quiet
- cmd: cd C:\projects\blue*
- cmd: pip install -e .[develop,docs]
- cmd: conda list

test_script:
- sh: testflo . -n 1;
- cmd: testflo . -n 1
